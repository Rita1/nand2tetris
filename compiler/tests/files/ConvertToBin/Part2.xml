<class><keyword>class</keyword><identifier>Main</identifier><symbol>{</symbol><subroutineDec><keyword>function</keyword><keyword>void</keyword><identifier>convert</identifier><symbol>(</symbol><parameterList><keyword>int</keyword><identifier>value</identifier></parameterList><symbol>)</symbol><subroutineBody><symbol>{</symbol><varDec><keyword>var</keyword><keyword>int</keyword><identifier>mask</identifier><symbol>,</symbol><identifier>position</identifier><symbol>;</symbol></varDec><varDec><keyword>var</keyword><keyword>boolean</keyword><identifier>loop</identifier><symbol>;</symbol></varDec><statements><letStatement><keyword>let</keyword><identifier>loop</identifier><symbol>=</symbol><expression><term><keyword>true</keyword></term></expression><symbol>;</symbol></letStatement><whileStatement><keyword>while</keyword><symbol>(</symbol><expression><term><identifier>loop</identifier></term></expression><symbol>)</symbol><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier>position</identifier><symbol>=</symbol><expression><term><identifier>position</identifier></term><symbol>+</symbol><term><integerConstant>1</integerConstant></term></expression><symbol>;</symbol></letStatement><letStatement><keyword>let</keyword><identifier>mask</identifier><symbol>=</symbol><expression><term><identifier>Main</identifier><symbol>.</symbol><identifier>nextMask</identifier><symbol>(</symbol><expressionList><expression><term><identifier>mask</identifier></term></expression></expressionList><symbol>)</symbol></term></expression><symbol>;</symbol></letStatement><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><symbol>~</symbol><term><symbol>(</symbol><expression><term><identifier>position</identifier></term><symbol>&gt;</symbol><term><integerConstant>16</integerConstant></term></expression><symbol>)</symbol></term></term></expression><symbol>)</symbol><symbol>{</symbol><statements><ifStatement><keyword>if</keyword><symbol>(</symbol><expression><term><symbol>~</symbol><term><symbol>(</symbol><expression><term><symbol>(</symbol><expression><term><identifier>value</identifier></term><symbol>&amp;</symbol><term><identifier>mask</identifier></term></expression><symbol>)</symbol></term><symbol>=</symbol><term><integerConstant>0</integerConstant></term></expression><symbol>)</symbol></term></term></expression><symbol>)</symbol><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier>Memory</identifier><symbol>.</symbol><identifier>poke</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>8000</integerConstant></term><symbol>+</symbol><term><identifier>position</identifier></term></expression><symbol>,</symbol><expression><term><integerConstant>1</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><doStatement><keyword>do</keyword><identifier>Memory</identifier><symbol>.</symbol><identifier>poke</identifier><symbol>(</symbol><expressionList><expression><term><integerConstant>8000</integerConstant></term><symbol>+</symbol><term><identifier>position</identifier></term></expression><symbol>,</symbol><expression><term><integerConstant>0</integerConstant></term></expression></expressionList><symbol>)</symbol><symbol>;</symbol></doStatement></statements><symbol>}</symbol><keyword>else</keyword><symbol>{</symbol><statements><letStatement><keyword>let</keyword><identifier>loop</identifier><symbol>=</symbol><expression><term><keyword>false</keyword></term></expression><symbol>;</symbol></letStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol></ifStatement></statements><symbol>}</symbol></whileStatement><returnStatement><keyword>return</keyword><symbol>;</symbol></returnStatement></statements><symbol>}</symbol></subroutineBody></subroutineDec><symbol>}</symbol></class>